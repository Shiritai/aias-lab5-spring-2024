#!/bin/bash

# lab04/scripts/../src/test/scala
project_path=$(realpath "$(dirname "$0")")/../
test_path=$project_path/src/test/scala/
project_prefix=$(sbt -warn "print name")

print_with_color() {
    color=''
    case "$1" in
    black)
        color="0;30"
        ;;
    darkGray)
        color="1;30"
        ;;
    red)
        color="0;31"
        ;;
    lightRed)
        color="1;31"
        ;;
    green)
        color="0;32"
        ;;
    lightGreen)
        color="1;32"
        ;;
    brown/Orang)
        color="0;33"
        ;;
    yellow)
        color="1;33"
        ;;
    blue)
        color="0;34"
        ;;
    lightBlue)
        color="1;34"
        ;;
    purple)
        color="0;35"
        ;;
    lightPurple)
        color="1;35"
        ;;
    cyan)
        color="0;36"
        ;;
    lightCyan)
        color="1;36"
        ;;
    lightGray)
        color="0;37"
        ;;
    white | *)
        color="1;37"
        ;;
    esac

    echo -e "[\e[${color}m$2\e[0m] $3"
}

print_info() {
    print_with_color blue INFO "$1"
}

print_error() {
    print_with_color red ERROR "$1"
}

# Replace $1 = string, $2 = from, $3 = to
replace_all() {
    # Perhap use Python to implement it is the easiest way!
    python3 -c "print(\"$1\".replace(\"$2\", \"$3\"))"
}

run_tests() {
    test_name=$project_prefix.$1
    # Use ls to fetch all files in such testing directory
    # Hidding error when given name is a file or DNE
    # Wrap with realpath to strip relative path
    test_path=$(realpath "$test_path""$(replace_all "$test_name" . /)")
    tests=$(ls "$test_path" 2>/dev/null)
    # run all tests in such directory
    if [ "$tests" ]; then
        for t in $tests; do
            real_t=$(replace_all "$test_name"."$t" .scala)
            sbt "Test/runMain $real_t $2"
        done
    elif [ -f "$test_path".scala ]; then
        sbt "Test/runMain $test_name $2"
    else
        print_error "Path of testbench(s) $test_path DNE"
    fi
}

run_golden_tests() {
    test_name=$project_prefix.$1
    # Use ls to fetch all files in such testing directory
    # Hidding error when given name is a file or DNE
    # Wrap with realpath to strip relative path
    test_path=$(realpath "$test_path""$(replace_all "$test_name" . /)")
    tests=$(ls "$test_path" 2>/dev/null)
    # run all tests in such directory
    if [ "$tests" ]; then
        for t in $tests; do
            real_t=$(replace_all "$test_name"."$t" .scala)
            sbt "testOnly $real_t"
        done
    elif [ -f "$test_path".scala ]; then
        sbt "testOnly $test_name"
    else
        print_error "Path of testbench(s) $test_path DNE"
    fi
}

test_option="-td ./generated"
test_with_vcd_option="$test_option -tbn verilator"

case $1 in
check)
    run_tests "$2" "$test_option"
    ;;
test)
    run_tests "$2" "$test_with_vcd_option"
    ;;
test_golden)
    run_golden_tests "$2"
    ;;
clean)
    case $2 in
    gen)
        rm -rf "$project_path"/generated
        ;;
    tar)
        rm -rf "$project_path"/target
        ;;
    test)
        rm -rf "$project_path"/test_run_dir
        ;;
    all | *)
        # default: clean all
        rm -rf "$project_path"/generated
        rm -rf "$project_path"/target
        rm -rf "$project_path"/test_run_dir
        ;;
    esac
    ;;
help)
    echo -e "This is a script that collects useful commands for lab4 :)\nAuthor: Eroiko"
    ;;
*)
    echo -e "Command not found :("
    ;;
esac
